# -*- mode: gdb-script -*-
python
import os
import re
import sys
import os.path
import textwrap
import gdb
import gdb.types
import gdb.printing

home          = os.environ.get("HOME", "~")
default_path  = os.path.join(home, "git", "installs")
objects_dir   = os.environ.get("objects_dir", default_path)
gdb_addons    = os.path.join(objects_dir, "gdb_addons")
python_addons = os.path.join(objects_dir, "gcc", "libstdc++-v3", "python")
ue4_addons    = os.path.join(home, ".config", "Epic", "GDBPrinters")

if os.path.isdir(python_addons):
  print("Installing libstdcxx printers...")
  sys.path.insert(0, python_addons)
  from libstdcxx.v6.printers import register_libstdcxx_printers
  register_libstdcxx_printers(None)

stl_script = os.path.join(gdb_addons, "stl_views.gdb")
if os.path.exists(stl_script):
  print("Installing stl_script printers...")
  gdb.execute(open(stl_script).read())

if os.path.isdir(ue4_addons):
  print("Installing UE4 printers...")
  sys.path.append(ue4_addons)
  from UE4Printers import register_ue4_printers
  register_ue4_printers(None)


class StdArrayPrinter:
  def __init__(self, val):
    self.val = val

  def to_string(self):
    s = "{} {}".format(self.val.type, textwrap.fill(str(self.val["_M_elems"])))
    return re.sub(" +", " ", s)

def build_array_pp():
    pp = gdb.printing.RegexpCollectionPrettyPrinter("array_lib")
    pp.add_printer('std::array', '^std::array<.+>$', StdArrayPrinter)
    return pp

gdb.printing.register_pretty_printer(gdb.current_objfile(), build_array_pp())


class LexicalCast(gdb.Command):
    def __init__(self):
        super(LexicalCast, self).__init__("lexical_cast", gdb.COMMAND_DATA)

    def matches(self, symbol, type, exact=True):
        params = symbol.find('('), symbol.find(')')
        if -1 in params: return False
        params = symbol[params[0] + 1 : params[1]]
        if re.match("^%s, %s( const)?&?$"%(re.escape("std::ostream&"), re.escape(type)), params): return True
        if not exact and re.match("^%s, .*::%s( const)?&?$"%(re.escape("std::ostream&"), re.escape(type)), params): return True
        return False

    def invoke(self, arg, from_tty):
        value = gdb.parse_and_eval(arg)
        type = str(value.type.strip_typedefs().unqualified())
        # TODO: Isn't unqualified() supposed to do that already?
        if type.startswith("const "): type = type[6:]
        if type.startswith("struct "): type = type[7:]
        if type.endswith(" &"): type = type[:-2]
        # TODO: There's probably a better way to browse the list of symbols ...
        shift_operators = gdb.execute("info functions operator<<", False, True).split('\n')
        matching_operators = [ op for op in shift_operators if self.matches(op, type)]
        if not matching_operators:
              gdb.write("No operator<<(std::ostream&, const %s&) found in the symbols. "
                        "Trying to find a match with additional namespace qualifiers.\n" % (type,))
              matching_operators = [ op for op in shift_operators if self.matches(op, type, False)]
        if not matching_operators:
              gdb.write("No operator<<(std::ostream&, const .*::%s&) found in the symbols. "
                        "Did you forget to explicitly instantiate your operator?\n"%(type,))
        else:
            if len(matching_operators) > 1:
                gdb.write("Found multiple operator<< matching this expression; trying to call each one of them...\n")
            for op in matching_operators:
                try:
                    op = op.split('  ', 1)[1][:-4] if op.endswith("@plt") else op.split(':', 1)[1].split('&', 1)[1].strip()[:-1]
                    gdb.execute("call (void)'%s'((std::cout), (%s))"%(op, arg))
                    gdb.execute("call (void)std::cout.put('\\n')")
                    gdb.execute("call (void)std::cout.flush()")
                    break
                except Exception as e:
                    gdb.write("Could not invoke %s: %s\n"%(op, e))
LexicalCast()

end

define print_vector
    if $argc == 2
        set $elem = $arg0.size()
        if $arg1 >= $arg0.size()
            printf "Error, %s.size() = %d, printing last element:\n", "$arg0", $arg0.size()
            set $elem = $arg1 -1
        end
        print *($arg0._M_impl._M_start + $elem)@1
    else
        print *($arg0._M_impl._M_start)@$arg0.size()
    end
end

document print_vector
Display vector contents
Usage: print_vector VECTOR_NAME INDEX
VECTOR_NAME is the name of the vector
INDEX is an optional argument specifying the element to display
end

# Don't pause on long output.
set height unlimited
set width unlimited
set pagination off

# Turn on various print options.
set print array on
set print pretty on
set print union on
set print demangle on
set print asm-demangle on
set print vtbl on
set print object on
set print symbol on

set max-completions 1000
set demangle-style auto
set complaints 0
set language auto
set history save on
set history size unlimited
set history remove-duplicates unlimited
set python print-stack full

show directories
