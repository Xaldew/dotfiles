* Character classes. *
whitespace      = { space | newline | tab } ;
string          = '"', { all_characters - '"' }, '"' ;
nat_number      = 1-9, { 0-9 } ;
pos_number      = 0 | nat_number ;
hex_number      = "0x", pos_number ;
integer         = 0 | [ "-" ], nat_number ;
number          = hex_number | integer ;
alphabetic_char = A-Z | a-z ;
all_characters  = A-Z | a-z | 0-9 | _ ;


* Generic KLL statements. *
kll            = { ( statement, ";" | comment ), whitespace } ;
comment        = "#", { all_characters | space } ;
statement      = variable_stmt |
                 define_stmt |
                 capability_stmt |
                 key_mapping_stmt |
                 property_mapping |
                 pixel_mapping |
                 animation_mapping ;


* Variable statements. *
kll_id          = alphabetic_char, { all_characters } ;
var_id          = string | kll_id;
variable        = ( var_id, [ "[", pos_number, "]", ] ) | string | number ;
variable_assign = variable, "=", variable;
array_assign    = var_id, "[", "]", "=", { variable, "," }, variable ;
variable_stmt   = array_assign | variable_assign;


* Define statements. *
define_stmt = kll_id, "=>", kll_id ;


* Capability statements. *
capability_param  = ( kll_id, ":", nat_number ) | "" ;
capability_params = { capability_param, "," }, capability_param ;
capability_stmt   = kll_id, "=>", kll_id, "(", capability_params, ")" ;


* Key mappings. *
usb_code      = "U", key ;
scan_code     = "S", (pos_number | hex_number) ;
consumer_code = "CON", key ;
system_code   = "SYS", key ;
key           = pos_number | hex_number | string ;
key_delimiter = ":" | "::" | ":+" | ":-" | "i:" | "i::" | "i:+" | "i:-" ;
press_state   = "P" | "UP" | "UR" | "R" | "H" | "O" ;
val_range     = key, "-", key ;

** Key triggers. **
analog        = pos_number ;
time_base     = "s" | "ms" | "us" ;
time          = pos_number, time_base ;
key_timing    = [ press_state, ":", ], time ;
timings       = { press_state, ":", time, "," }, press_state, ":", time ;
time/state    = analog | press_state | timing | timings ;
trigger_code  = scan_code | usb_code ;
ind_state     = "A" | "D" | "OFF" | "ON" ;
indicator     = "I", key, [ "(",  ind_state, ")" ] ;
trigger       = trigger_code, "(", time/state, ")" ;
key_range     = ( val_range | key ), [ "(", analog, ")" ] ;
ranges        = { key_range, "," }, key_range ;
trigger_range = ("U" | "S"), "[", ranges, "]" [ "(", analog, ")" ] ;
trigger_map   = trigger | indicator | trigger_range ;
key_trigger   = { trigger_map, ("," | "+") }, trigger_map ;
key_mapping_stmt = key_trigger, key_delimiter, key_result ;

** Key results. **
capability_arg  = variable | number | "NULL" ;
capability_args = { capability_arg, "," }, capability_arg ;
capability      = kll_id, "(", capability_args, ")" ;
result_range    = "U", "[", { (val_range | key) ",", (val_range | key) },  "]" ;
result_codes    = (usb_code | consumer_code | system_code | result_range | capability) [ "(", key_timing, ")" ] ;
result          =  result_codes | string | "None" ;
key_result      = { result, ("," | "+") }, result ;


* Scan-code property mapping. *
property         = kll_id, ":", integer ;
properties       = { property, "," }, property ;
property_mapping = scan_code "<=", properties ;


* Pixel mappings. *
channel       = pos_number, ":", nat_number ;
channels      = { channel, "," }, channel ;
pixel_mapping = "P", "[", pos_number, "]", "(", channels, ")", ":", ( scan_code | "None" ) ;


* Animation mappings. *
idx_exp    = "i", [ "+", "-" ], pos_number, [ "%" ] ;
comp       = pos_number | idx_exp ;
exp        = pos_number | ( ("r" | "c"), ":" comp ) ;
address    = exp, [ ",", exp ] ;
op         = "" | "+" | "-" | "+:" | "-:" | "<<" | ">>" ;
values     = op, pos_number, [ op, pos_number, [ op, pos_number ] ] ;
pixel      = ( "P" | "PL" ), "[", address, "]", "(", values, ")" ;
kll_pixel  = pixel | ("U", key) | ("S", key) ;
kll_pixels = { kll_pixel, "," }, kll_pixel ;

interpolation     = "interp", ":", ( "on" | "off" | "kll" ) ;
modifier          = "loop" [ ":", pos_number ] | "div", ":", pos_number | "start" | "stop" | "frame", ":", pos_number | interpolation ;
modifiers         = { modifier, "," }, modifier ;
animation_frame   = "[", kll_id, "]", "<=", kll_pixels ;
animation_mod     = "[", kll_id, "]", "<=", modifiers ;
animation_mapping = "A", ( animation_mod | animation_frame ) ;
