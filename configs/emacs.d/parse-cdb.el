;; A module to parse compilation database file.
;; One example of such a file is: compile_commands.json.
;; Such a file can be generated by bear, cmake or Ninja.

(require 'json)

(defun parse-cdb-find-cdb (path cdb)
  "Find the compilation database file named 'cdb', starting from 'path'."
  (let (top)
    (setq top (locate-dominating-file path cdb))
    (when top
      (concat top cdb))))


(defvar parse-cdb-database (make-hash-table :test 'equal)
  "A hash table of compilation databases for various projects.")


(defun parse-cdb-json (cdb)
  "Parse the given compilation database."
  (when (file-readable-p cdb)
    (json-read-file cdb)))


(defun parse-cdb ()
  "Find and parse the compilation database(s).

   The format is described here:
       http://clang.llvm.org/docs/JSONCompilationDatabase.html
  "
  (interactive)
  (let ((path nil)
	(top nil)
	(cdb-file nil)
	(cdb nil)
	(cdb-entry nil))
    ;; Find the compilation database file.
    (setq path (file-name-directory (buffer-file-name)))
    (setq cdb-file (parse-cdb-find-cdb path "compile_commands.json"))
    (when cdb-file
      (setq top (file-name-directory cdb-file))
      (setq cdb (gethash top parse-cdb-database nil))
      (when (not cdb)
	(setq cdb (parse-cdb-json cdb-file))
	(puthash top cdb parse-cdb-database))

      (setq cdb-entry (parse-cdb-find-entry cdb))
      (parse-cdb-apply-effects cdb-file cdb-entry) )))


(defun parse-cdb-find-entry (cdb)
  "Find the entry corresponding to the given file."
  (let ((i 0)
	(el nil)
	(found nil)
	(len (length cdb)))
    (while (and (not found) (< i len))
      (setq el (elt cdb i))
      (setq i (1+ i))
      (when (string= (buffer-file-name) (cdr (assoc 'file el)))
	(print "Found it!")
	(setq found t)))
    (setq el el)))


(defun parse-cdb-apply-effects (file entry)
  "Apply the effects from successfully parsing the compilation database."
  (let ((cc nil)           ; The compiler.
	(orig-cmd nil)     ; The original list of compiler commands.
	(cmd nil)          ; The list of misc. compiler commands.
	(dir nil)          ; The runtime directory.
	(sys-incl nil)     ; List of system include paths.
	(incl nil)         ; List of normal include paths.
	(defs nil))        ; List of definitions.

    ;; Extract the Raw command string and runtime directory.
    (setq orig-cmd (split-string (cdr (assoc 'command entry))))
    (setq dir (cdr (assoc 'directory entry)))

    ;; Extract the compiler.
    (setq cc (car orig-cmd))
    (setq cmd (cdr orig-cmd))

    ;; Extract include directories.
    (setq sys-incl (parse-cdb-get-system-includes cmd))

    (print cmd)))

(defun parse-cdb-get-compiler (cc)
  "Given the raw compiler path get the symbol for the compiler."
  )

(defun parse-cdb-get-defines (cmd)
  "Given a compile command, extract the arguments that are defines."
  )


(defun parse-cdb-get-system-includes (cmds)
  "Given a list of compile commands, extract the system include arguments.

   System includes are includes which uses angle brackets instead of quotes.

   "
  (let ((li nil)         ; The current list item.
	(sys-incls nil)  ; System includes with -isystem "header".
	(I-incls nil))   ; System includes with -I"header" or -I "header".
    (while cmds
      (setq li (pop cmds))
      ;; If the current item is a system include designator, add the next item
      ;; to the include paths.
      (cond ((and (string= li "-isystem")
		  (setq li (pop cmds)))
	     (push li sys-incls))

	    ((and (string= li "-I")
	    	  (setq li (pop cmds)))
	     (push li I-incls))

	    ((and (string-prefix-p "-I" li)
	    	  (setq li (substring cmds 2)))
	     (push li I-incls))
	    )))
  (append I-incls sys-incls))


(defun parse-cdb-get-includes (cmd)
  "Given a list of compile command, extract the local include arguments.

   Local includes are include paths that use quotes instead of angle brackets.

  "
  )
