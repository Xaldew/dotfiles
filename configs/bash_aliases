# Alias definitions for the bash-shell.
# This list will be filled in automatically by scripts later on.

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || \
	eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto $GREP_OPTIONS'
    alias fgrep='fgrep --color=auto $GREP_OPTIONS'
    alias egrep='egrep --color=auto $GREP_OPTIONS'
fi

alias ssh-lth="ssh dt09gw1@login.student.lth.se"

alias ..='cd ..'
alias ....='cd ../..'
alias ......='cd ../../..'

alias sl=ls
alias ll="ls -lFh"
alias la="ls -Alh"
alias lh="ls -hl"
alias lah="ls -hal"
alias l="ls -CF"

alias maek=make
alias mkae=make
alias mkea=make
alias amke=make
alias akem=make
alias amek=make
alias meka=make

alias svnst="svn st"
alias snv=svn

# Terminal emacs (xemacs)
alias em="emacs --no-window-system"
alias ema="emacs --no-window-system"
alias emac="emacs --no-window-system"
alias emas="emacs --no-window-system"
alias emasc="emacs --no-window-system"
alias emascs="emacs --no-window-system"
alias eam="emacs --no-window-system"

# Graphical emacs.
alias ge="emacs --maximized"
alias gem="emacs --maximized"
alias gema="emacs --maximized"
alias gemac="emacs --maximized"
alias gemacs="emacs --maximized"

alias tgi=git
alias gti=git
alias gi=git
alias gt=git

alias qemu-arm="qemu-arm -L /usr/arm-linux-gnueabihf"

alias open=xdg-open
alias latexmk="latexmk -pdf"
alias gcc-defines="gcc -dM -E - < /dev/null"
alias g++-defines="g++ -dM -E - < /dev/null"
alias xfce-shortcuts="xfconf-query -c xfce4-keyboard-shortcuts -l -v | \
cut -d'/' -f4 | awk '{printf \"%-30s\", \$2 ; print \"\\t\" \$1 }' | \
sort | uniq"

function dls () {
    # List directories.
    echo $(ls -l --color | grep "^d" | awk '{ print $9 }' | tr -d "/")
}

function dgrep()
{
    # A recursive, case-insensitive grep that excludes binary files.
    grep -iR "$@" * | grep -v "Binary"
}

function dfgrep()
{
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames.
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

function psgrep()
{
    # Grep for processes.
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

function unpatch()
{
    # Undo previous patching attempts.
    find . -name "*.orig" -o -name "*.rej"  -type f -exec rm {} \;
    find . -name "b" -type d -exec rm -rf {} \;
}

# Function to compile and run any of the project euler files.
function euler ()
{
    for arg in "$@"
    do
	filename=$(basename $arg);
	extension="${filename##*.}";
	case $extension in
	    c)
		cc -std=c99 -pedantic -Wall -Wextra $filename -lm && ./a.out;;
	    c[cp])
		g++ $filename && ./a.out;;
	    py)
		python $filename
	esac
    done
    return 0
}

# Function to extract a range of pdf-pages using ghostscript.
# Courtesy of Kurt Pfeifle @ Linux Journal.
function pdfpextr()
{
    # this function uses 3 arguments:
    #     $1 is the input file
    #     $2 is the first page of the range to extract
    #     $3 is the last page of the range to extract
    #     The output file will be named "inputfile_pXX-pYY.pdf"

    input=${1}
    start=${2}
    end=${3}
    shift 3
    gs  "$@" \
	-sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
	-dFirstPage=${start} \
	-dLastPage=${end} \
	-sOutputFile=${input%.pdf}_p${2}-p${3}.pdf \
	${input}
}

# Function to convert a PDF to grayscale.
function pdfgray()
{
    # this function uses 3 arguments:
    #     $1 is the input pdf file.
    #     The output file will be named "'inputfile'_grayscale.pdf"

    input=${1}
    output=$(basename ${1} .pdf)_grayscale.pdf
    shift 1
    gs  "$@" \
	-sOutputFile=${output} \
	-sDEVICE=pdfwrite \
	-sColorConversionStrategy=Gray \
	-dProcessColorModel=/DeviceGray \
	-dCompatibilityLevel=1.4 \
	-dNOPAUSE \
	-dBATCH \
	${input}
}

# Function to find the dropbox folder.
function find_dropbox()
{
    if [ -d $HOME/Dropbox ]; then
	echo $HOME/Dropbox
    elif [ -d $(tail -n 1 $HOME/.dropbox/host.db | base64 -d) ]; then
	echo $(tail -n 1 $HOME/.dropbox/host.db | base64 -d)
    fi
}

# Function to print a useful and funny ascii art.
function greet_user()
{
    if [ -n "$(command -v cowsay)" ]; then
	cowfiles=($(cowsay -l | tail -n +2))
	cowfile=${cowfiles[$RANDOM % ${#cowfiles[@]} ]}
	BINARY=2
	T=1
	number=$RANDOM
	let "number %= $BINARY"
	if [ "$number" -eq $T ]; then
	    cowthink -f $cowfile $(whatis $(ls /bin) 2>/dev/null | shuf -n 1)
	else
	    cowsay -f $cowfile $(whatis $(ls /bin) 2>/dev/null | shuf -n 1)
	fi
    else
	echo "Did you know that:" && whatis $(ls /bin | shuf -n 1)
    fi
}

function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create a tree implementation if not available.
if [ -z "$(which tree)" ]; then
    function tree ()
    {
	find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
    }
fi

# Get your current shell
function my-shell()
{
    ps | grep `echo $$` | awk '{ print $4 }'
}

function firefox_dev()
{
    if [ ! -d $HOME/git/installs/addon-sdk ]; then
	(cd $HOME/git/installs &&
		git clone git://github.com/mozilla/addon-sdk.git &&
		cd addon-sdk &&
		git checkout 1.17 &&
		git archive 1.17 python-lib/cuddlefish/_version.py | tar -xvf -)
    fi
    cwd=$(pwd)
    cd $HOME/git/installs/addon-sdk
    source bin/activate
    cd $cwd
}
