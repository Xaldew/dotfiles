# Alias definitions for the bash-shell.
# This list will be filled in automatically by scripts later on.

# Enable color support of ls and also add handy aliases.
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || \
	    eval "$(dircolors -b)"
    # Add default grep options
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto --exclude-dir={\.svn,\.git,\.repo}'
    alias fgrep='fgrep --color=auto --exclude-dir={\.svn,\.git,\.repo}'
    alias egrep='egrep --color=auto --exclude-dir={\.svn,\.git,\.repo}'
fi

alias ssh-lth="ssh dt09gw1@login.student.lth.se"

alias ..='cd ..'
alias ....='cd ../..'
alias ......='cd ../../..'

alias sl=ls
alias ll="ls -lFh"
alias la="ls -Alh"
alias lh="ls -hl"
alias lah="ls -hal"
alias l="ls -CF"

alias maek=make
alias mkae=make
alias mkea=make
alias amke=make
alias akem=make
alias amek=make
alias meka=make

alias svnst="svn st"
alias snv=svn

alias rs="rsync --recursive"
alias rsp="rsync --progress --recursive"

# Terminal Emacsclient.
function nx-emacs-client()
{
    # Start the Emacs client toward the default Emacs daemon socket.
    # Append a new socket name to the arguments to use a different one.
    emacsclient --tty --socket-name=default --alternate-editor="" "$@"
}
alias em="nx-emacs-client"
alias ema="nx-emacs-client"
alias emac="nx-emacs-client"
alias emas="nx-emacs-client"
alias emasc="nx-emacs-client"
alias emascs="nx-emacs-client"
alias eam="nx-emacs-client"

# Graphical Emacsclient.
function graphical-emacs-client()
{
    # Start the Emacs client toward the default Emacs daemon socket.
    # Append a new socket name to the arguments to use a different one.
    emacsclient --create-frame --socket-name=default --alternate-editor="" "$@"
}
alias ge="graphical-emacs-client"
alias gem="graphical-emacs-client"
alias gema="graphical-emacs-client"
alias gemac="graphical-emacs-client"
alias gemacs="graphical-emacs-client"

# Start new non-client nx-Emacs instances.
alias nem="emacs --no-window-system"
alias nema="emacs --no-window-system"
alias neam="emacs --no-window-system"
alias nemac="emacs --no-window-system"
alias nemas="emacs --no-window-system"
alias nemacs="emacs --no-window-system"
alias nemasc="emacs --no-window-system"

# Start new non-client graphical-Emacs instances.
alias ngem="emacs --maximized --no-desktop"
alias ngema="emacs --maximized --no-desktop"
alias ngeam="emacs --maximized --no-desktop"
alias ngemac="emacs --maximized --no-desktop"
alias ngemas="emacs --maximized --no-desktop"
alias ngemacs="emacs --maximized --no-desktop"
alias ngemasc="emacs --maximized --no-desktop"

# Minor hack to pipe stdout to an Emacs buffer.
function nx-emacspipe()
{
    tmp=$(mktemp) && cat > $tmp && nx-emacs-client $tmp ; rm $tmp
}
alias ep="nx-emacspipe"
alias emp="nx-emacspipe"
function graphical-emacspipe()
{
    tmp=$(mktemp) && cat > $tmp && graphical-emacs-client $tmp ; rm $tmp
}
alias gep="graphical-emacspipe"
alias gemp="graphical-emacspipe"

# Start a new Emacs daemon.
function emacs-daemon()
{
    server=${1-default}
    shift
    \emacs --daemon=$server "$@"
}
alias emd=emacs-daemon
alias emad=emacs-daemon
alias emacd=emacs-daemon
alias emacsd=emacs-daemon


# Aliases for git.
alias tgi=git
alias gti=git
alias gi=git
alias gt=git

alias qemu-arm="qemu-arm -L /usr/arm-linux-gnueabihf"

alias latexmk="latexmk -pdf"
alias gcc-defines="gcc -dM -E - < /dev/null"
alias g++-defines="g++ -dM -E - < /dev/null"
alias xfce-shortcuts="xfconf-query -c xfce4-keyboard-shortcuts -l -v | \
cut -d'/' -f4 | awk '{printf \"%-30s\", \$2 ; print \"\\t\" \$1 }' | \
sort | uniq"


open()
{
    # Open each of the given files with the prefered application.
    for f in "$@"; do
	xdg-open $f
    done
}

source_if()
{
    # Source the given files if they exist.
    for f in "$@"; do
	if [ -e "$f" ]; then
	    . $f
	else
	    return
	fi
    done
}

function dls ()
{
    # List directories.
    echo $(ls -l --color | grep "^d" | awk '{ print $9 }' | tr -d "/")
}

function dgrep()
{
    # A recursive, case-insensitive grep that excludes binary files.
    grep -iR "$@" * | grep -v "Binary"
}

function dfgrep()
{
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames.
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

function psgrep()
{
    # Grep for processes.
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

function unpatch()
{
    # Undo previous patching attempts.
    find . -name "*.orig" -o -name "*.rej"  -type f -exec rm {} \;
    find . -name "b" -type d -exec rm -rf {} \;
}

# Function to compile and run any of the project euler files.
function euler ()
{
    for arg in "$@"
    do
	filename=$(basename $arg);
	extension="${filename##*.}";
	case $extension in
	    c)
		cc -std=c99 -pedantic -Wall -Wextra $filename -lm && ./a.out;;
	    c[cp])
		g++ $filename && ./a.out;;
	    py)
		python $filename
	esac
    done
    return 0
}


# Merge the listed files into a single pdf called merged.pdf.
function pdf-merge()
{
    gs \
	-dBATCH \
	-dNOPAUSE \
	-dQUIET \
	-sDEVICE=pdfwrite \
	-sOutputFile=merged.pdf \
	"$@"
}


# Function to extract a range of pdf-pages using ghostscript.
# Courtesy of Kurt Pfeifle @ Linux Journal.
function pdfpextr()
{
    # This function uses 3 arguments:
    #     $1 is the input file
    #     $2 is the first page of the range to extract
    #     $3 is the last page of the range to extract
    #     The output file will be named "inputfile_pXX-pYY.pdf"

    input=${1}
    start=${2}
    end=${3}
    shift 3
    gs  "$@" \
	-sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
	-dFirstPage=${start} \
	-dLastPage=${end} \
	-sOutputFile=${input%.pdf}_p${2}-p${3}.pdf \
	${input}
}


# Function to convert a PDF to grayscale.
function pdfgray()
{
    # this function uses 3 arguments:
    #     $1 is the input pdf file.
    #     The output file will be named "'inputfile'_grayscale.pdf"

    input=${1}
    output=$(basename ${1} .pdf)_grayscale.pdf
    shift 1
    gs  "$@" \
	-sOutputFile=${output} \
	-sDEVICE=pdfwrite \
	-sColorConversionStrategy=Gray \
	-dProcessColorModel=/DeviceGray \
	-dCompatibilityLevel=1.4 \
	-dNOPAUSE \
	-dBATCH \
	${input}
}


# Function to find the dropbox folder.
function find_dropbox()
{
    if [ -d $HOME/Dropbox ]; then
	echo $HOME/Dropbox
    elif [ -d $(tail -n 1 $HOME/.dropbox/host.db | base64 -d) ]; then
	echo $(tail -n 1 $HOME/.dropbox/host.db | base64 -d)
    fi
}


# Function to print a useful and funny ascii art.
function greet_user()
{
    if [ -n "$(command -v cowsay)" ]; then
	cowfiles=($(cowsay -l | tail -n +2))
	cowfile=${cowfiles[$RANDOM % ${#cowfiles[@]} ]}
	BINARY=2
	T=1
	number=$RANDOM
	let "number %= $BINARY"
	if [ "$number" -eq $T ]; then
	    cowthink -f $cowfile $(whatis $(ls /bin) 2>/dev/null | shuf -n 1)
	else
	    cowsay -f $cowfile $(whatis $(ls /bin) 2>/dev/null | shuf -n 1)
	fi
    else
	echo "Did you know that:" && whatis $(ls /bin | shuf -n 1)
    fi
}


function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.tar.xz)         tar xf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# Create a tree implementation if not available.
if command -v tree > /dev/null 2>&1; then
    function tree()
    {
	find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
    }
fi


# Get your current shell
function my-shell()
{
    ps | grep `echo $$` | awk '{ print $4 }'
}


# Setup the firefox addon development environment.
function firefox_dev()
{
    if [ ! -d $objects_dir/addon-sdk ]; then
	(cd $objects_dir &&
		git clone git://github.com/mozilla/addon-sdk.git &&
		cd addon-sdk &&
		git checkout 1.17 &&
		git archive 1.17 python-lib/cuddlefish/_version.py | tar -xvf -)
    fi
    cwd=$(pwd)
    cd $objects_dir/addon-sdk
    source bin/activate
    cd $cwd
}


# Output a random signed integer.
# Optional argument is the number of bytes to use for the number.
function rand_int()
{
    bytes=${1-4}
    od --address-radix=n --format=d --read-bytes=$bytes /dev/urandom | \
	sed -e 's/^[ \t]*//'
}


# Output a random signed integer.
# Optional argument is the number of bytes to use for the number.
function rand_uint()
{
    bytes=${1-4}
    od --address-radix=n --format=u --read-bytes=$bytes /dev/urandom | \
	sed -e 's/^[ \t]*//'
}


# Download a single file from a git repo.
# In many cases, it may be more suitable to use wget or curl instead.
# $1: The URL to the desired repository.
# $2: The file we would like to extract.
function git-dl()
{
    url="$1"
    file="$2"
    base_file="$(basename $2)"
    repo=$(basename "$url" ".git")
    dir=$(dirname $file)
    ret=0
    git archive --remote=$url HEAD:$dir $file 2> /dev/null | tar -x 2> /dev/null
    if [ ! $? -eq 0 ]; then
	tmp_dir=$(mktemp -d)
	cwd="$(pwd)"
	cd $tmp_dir
	git clone --no-checkout --depth 1 $url 2> /dev/null && \
	    cd $repo && git show HEAD:$file > $cwd/$base_file 2> /dev/null
	ret=$?
	cd $cwd
	rm -rf $tmp_dir
    fi
    return $ret
}


function colors()
{
    local fgc bgc vals seq0
    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # Foreground colors.
    for fgc in {30..37}; do
	# Background colors
	for bgc in {40..47}; do
	    fgc=${fgc#37} # White
	    bgc=${bgc#40} # Black

	    vals="${fgc:+$fgc;}${bgc}"
	    vals=${vals%%;}

	    seq0="${vals:+\e[${vals}m}"
	    printf "  %-9s" "${seq0:-(default)}"
	    printf " ${seq0}TEXT\e[m"
	    printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
	done
	echo; echo
    done
}
